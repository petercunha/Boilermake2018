{"version":3,"sources":["components/HomeComponent.js","components/UploadProduct.js","components/SearchProducts.js","pages/App.js","serviceWorker.js","index.js"],"names":["Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","style","textAlign","marginTop","display","maxWidth","Component","stitchClient","Stitch","initializeDefaultAppClient","auth","loginWithCredential","AnonymousCredential","then","user","UploadProduct","handleButtonClick","titleValue","file","setState","warningText","buttonText","data","FormData","append","imageURL","fetch","method","body","response","json","evaluation","loading","Fragment","href","map","e","name","handleChange","info","status","handleUploadImage","originFileObj","productSent","priceValue","bind","assertThisInitialized","Promise","resolve","fileReader","FileReader","onload","event","$binary","base64","target","result","split","subType","readAsDataURL","fileName","convertImageToBSONBinaryObject","fileBinary","aws","getServiceClient","AwsServiceClient","factory","key","id","url","encodeURIComponent","request","AwsRequest","Builder","withService","withAction","withRegion","withArgs","ACL","Bucket","ContentType","type","Key","Body","execute","build","_this2","value","imageUrl","uploadButton","icon","className","row","col","span","input","defaultValue","onChange","handleTitleChange","addonBefore","placeholder","upload","listType","showUploadList","src","alt","es_button","disabled","onClick","Meta","Card","Product","_ref","hit","keywordBadges","keywords","slice","k","badge","count","color","backgroundColor","margin","card","width","cover","height","overflow","title","image","actions","download","rel","description","SearchProduct","InstantSearch","appId","apiKey","indexName","SearchBox","Hits","hitComponent","Pagination","Content","Layout","Sider","Main","toggle","collapsed","onCollapse","handleMenuClick","toRender","HomeComponent","components_SearchProducts","components_UploadProduct","selectedComponent","toggler","layout","minHeight","trigger","collapsible","menu","theme","defaultSelectedKeys","mode","Item","padding","background","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","App","document","getElementById","URL","process","origin","addEventListener","concat","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.76648322.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Home extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <div style={{ textAlign: 'center', marginTop: '15%' }}>\n                <div style={{ display: 'inline-block', maxWidth: '45em' }}>\n                    <h1>Optical Search Engine</h1>\n                    <div style={{ textAlign: 'left' }}>\n                        <p>\n                            The Optical Search Engine (OSE) allows you to easily upload photos and search for them later.\n                            By using machine learning techniques, we can analyze your image and extract objects, ideas,\n                            and themes from them. These attributes are added to a database and make your images searchable!\n                            The image recognition API we used is called Clarifai, and the search engine is powered by Algolia.\n                        </p>\n                        <p>\n                            <i>\n                                This project was inspired by Google Photos, which allows users to upload and search through their images.\n                                Our project is an open source alternative!\n                        </i>\n                        </p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport { Upload, Icon, Button, Input, Row, Col } from \"antd\";\nimport { Stitch, AnonymousCredential } from \"mongodb-stitch-browser-sdk\";\nimport {\n    AwsRequest,\n    AwsServiceClient\n} from \"mongodb-stitch-browser-services-aws\";\n\nconst stitchClient = Stitch.initializeDefaultAppClient(\"zbay-thbww\");\nstitchClient.auth\n    .loginWithCredential(new AnonymousCredential())\n    .then(user => {\n        // console.log(user);\n    });\n\nclass UploadProduct extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            imageURL: null,\n            evaluation: [],\n            productSent: false,\n            loading: false,\n            file: null,\n            buttonText: \"Submit\",\n            titleValue: \"\",\n            priceValue: \"\",\n            warningText: \"\"\n        };\n\n        this.handleUploadImage = this.handleUploadImage.bind(this);\n    }\n\n    convertImageToBSONBinaryObject(file) {\n        return new Promise(resolve => {\n            var fileReader = new FileReader();\n            fileReader.onload = event => {\n                resolve({\n                    $binary: {\n                        base64: event.target.result.split(\",\")[1],\n                        subType: \"00\"\n                    }\n                });\n            };\n            fileReader.readAsDataURL(file);\n        });\n    }\n\n    async handleUploadImage(file, fileName) {\n        const fileBinary = await this.convertImageToBSONBinaryObject(file);\n        const aws = stitchClient.getServiceClient(\n            AwsServiceClient.factory,\n            \"zbay-bucket\"\n        );\n        const key = `${stitchClient.auth.user.id}-${fileName}`;\n        const bucket = \"zbay-bucket\";\n        const url = `http://${bucket}.s3.amazonaws.com/${encodeURIComponent(key)}`;\n        const request = new AwsRequest.Builder()\n            .withService(\"s3\")\n            .withAction(\"PutObject\")\n            .withRegion(\"us-east-1\")\n            .withArgs({\n                ACL: \"public-read\",\n                Bucket: bucket,\n                ContentType: file.type,\n                Key: key,\n                Body: fileBinary\n            });\n        try {\n            await aws.execute(request.build()).then(result => {\n                // console.log(result);\n                // console.log(url);\n                this.setState({\n                    imageURL: url,\n                    loading: false,\n                })\n            });\n        } catch (e) {\n            // console.log(e);\n            this.setState({\n                imageURL: \"\",\n                loading: true,\n            })\n        }\n\n    }\n\n    handleButtonClick = () => {\n        // Make sure the user has given us input\n        if (this.state.titleValue === \"\" ||\n            this.file === null) {\n            this.setState({ warningText: \"Please ensure that you've added a title and image.\" })\n            return\n        } else {\n            this.setState({ warningText: \"\" })\n        }\n\n        this.setState({ buttonText: \"Loading...\" })\n\n\n        const data = new FormData();\n        data.append(\"url\", this.state.imageURL);\n        data.append(\"title\", this.state.titleValue);\n        fetch(\"/upload\", {\n            method: \"POST\",\n            body: data\n        }).then(response => {\n            response.json().then(body => {\n                this.setState({\n                    imageURL: body.file,\n                    evaluation: body.evaluation,\n                    loading: false,\n                    buttonText: \"Image posted!\",\n                    warningText: (\n                        <>\n                            <b>Image link: </b>\n                            <a href={this.state.imageURL}>{this.state.imageURL}</a>\n                            <br />\n                            <b>Image attributes: </b>\n                            <ul>\n                                {body.evaluation.map(e => <li>{e.name}</li>)}\n                            </ul>\n                        </>\n                    )\n                });\n            });\n        });\n    };\n\n    handleChange = info => {\n        if (info.file.status === \"uploading\") {\n            this.setState({ loading: true });\n            this.handleUploadImage(info.file.originFileObj, info.file.name);\n            return;\n        }\n    };\n\n    handleTitleChange(event) {\n        this.setState({ titleValue: event.target.value });\n    }\n\n    handlePriceChange(event) {\n        this.setState({ priceValue: event.target.value });\n    }\n\n    render() {\n        const imageUrl = this.state.imageURL;\n\n        const uploadButton = (\n            <div>\n                <Icon type={this.state.loading ? \"loading\" : \"plus\"} />\n                <div className=\"ant-upload-text\">Upload</div>\n            </div>\n        );\n\n        return (\n            <>\n                <Row>\n                    <Col span={20}>\n                        <Input\n                            value={this.state.titleValue}\n                            defaultValue={this.state.titleValue}\n                            onChange={this.handleTitleChange.bind(this)}\n                            addonBefore=\"Title\"\n                            placeholder=\"Name your image\"\n                        />\n                    </Col>\n                </Row>\n                <br />\n                <Row>\n                    <Col span={24}>\n                        <Upload\n                            name=\"avatar\"\n                            listType=\"picture-card\"\n                            className=\"avatar-uploader\"\n                            showUploadList={false}\n                            onChange={this.handleChange}\n                        >\n                            {imageUrl ? <img src={imageUrl} alt=\"avatar\" /> : uploadButton}\n                        </Upload>\n                    </Col>\n                </Row>\n                <br />\n                <Button\n                    disabled={this.state.buttonText !== \"Submit\"}\n                    onClick={this.handleButtonClick.bind(this)}>\n                    {this.state.buttonText}\n                </Button>\n                <br /><br />\n                <p>{this.state.warningText}</p>\n            </>\n        );\n    }\n}\n\nexport default UploadProduct;\n","import React, { Component } from \"react\";\nimport { InstantSearch, Hits, SearchBox, Pagination } from 'react-instantsearch-dom';\nimport { Card, Icon, Badge } from 'antd';\nimport './SearchProducts.css'\n\nconst { Meta } = Card\n\nclass SearchProduct extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <>\n                <InstantSearch\n                    appId=\"EQJPKC2WRW\"\n                    apiKey=\"5b04b1e3177d8269cf7c95e282d3b81b\"\n                    indexName=\"items\"\n                >\n                    <SearchBox />\n                    <Hits hitComponent={Product} />\n                    <Pagination />\n                </InstantSearch>\n            </>\n        );\n    }\n}\n\nfunction Product({ hit }) {\n    const keywordBadges = hit.keywords.slice(0, 7).map(k => {\n        if (k !== 'no person') {\n            return <Badge count={k} key={k} style={{ color: '#111', backgroundColor: '#EEE', margin: '2px' }}></Badge>\n        } else {\n            return <div key={k}></div>\n        }\n    })\n    return (\n        <Card\n            style={{ width: 300, maxWidth: '100%' }}\n            cover={\n                <div style={{ height: 250, overflow: 'hidden' }}>\n                    <img alt={hit.title} width={300} src={hit.image} />\n                </div>\n            }\n            actions={[\n                <a\n                    download\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                    key=\"download\"\n                    href={hit.image}>\n                    <Icon type=\"download\" /> Download\n                </a>\n            ]}>\n            <Meta\n                title={hit.title}\n                description={keywordBadges}\n            />\n        </Card >\n    )\n}\n\nexport default SearchProduct;\n","import React, { Component } from \"react\";\nimport HomeComponent from '../components/HomeComponent'\nimport UploadProduct from '../components/UploadProduct'\nimport SearchProducts from '../components/SearchProducts'\n\nimport { Layout, Menu, Icon } from 'antd';\nconst { Content, Sider } = Layout;\n\nclass Main extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      collapsed: false,\n      selectedComponent: <HomeComponent />\n    };\n  }\n\n  toggle = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  }\n\n  onCollapse = (collapsed) => {\n    this.setState({ collapsed });\n  }\n\n  handleMenuClick = (event) => {\n    let toRender;\n    switch (event.key) {\n      case \"1\":\n        toRender = <HomeComponent />\n        break;\n      case \"2\":\n        toRender = <SearchProducts />\n        break;\n      case \"3\":\n        toRender = <UploadProduct />\n        break;\n      default:\n        toRender = <h1>Error</h1>\n        break;\n    }\n    this.setState({ selectedComponent: toRender });\n  }\n\n  render() {\n    const toggler = (\n      < Icon\n        className=\"trigger\"\n        type={this.state.collapsed ? 'right' : 'left'}\n        style={{ width: '100%' }}\n        onClick={this.toggle}\n      />\n    )\n    return (\n      <>\n        <Layout style={{ minHeight: '100vh' }}>\n          <Sider\n            trigger={toggler}\n            collapsible\n            collapsed={this.state.collapsed}>\n            {/* <h1 style={{ textAlign: 'center', color: '#eee', paddingTop: '15px' }}>Online Store</h1> */}\n            <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\" onClick={this.handleMenuClick}>\n              <Menu.Item key=\"1\">\n                <Icon type=\"home\" />\n                <span>Home</span>\n              </Menu.Item>\n              <Menu.Item key=\"2\">\n                <Icon type=\"search\" />\n                <span>Search</span>\n              </Menu.Item>\n              <Menu.Item key=\"3\">\n                <Icon type=\"upload\" />\n                <span>Upload</span>\n              </Menu.Item>\n            </Menu>\n          </Sider>\n          <Layout>\n            <Content style={{ margin: '24px 16px', padding: 24, background: '#fff', minHeight: 280 }}>\n              {this.state.selectedComponent}\n            </Content>\n          </Layout>\n        </Layout>\n      </>\n    );\n  }\n}\n\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}